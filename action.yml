---
name: "Module Release Locator"
description: |
  "Locates and processes release source code from GitHub repositories"
author: "WippyAI"
inputs:
  username:
    description: "Username for modules.wippy.ai authentication"
    required: true
  password:
    description: "Password for modules.wippy.ai authentication"
    required: true
  tag:
    description: "The version tag to publish. Supports packcli automatic increments (major/minor/patch/tag) or semantic version format (e.g., v1.0.0, 1.0.0-alpha.1). If not provided, uses github.ref_name."
    required: false
  directory:
    description: "The directory to release files"
    required: false
    default: "."

outputs:
  source_code_url:
    description: "URL of the release source code"
    value: ${{ steps.clone.outputs.source_code_url }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
    - name: Clone repository at current tag
      id: clone
      shell: bash
      run: |
        # Clone the repository at the current tag/branch (github.ref_name)
        git clone --depth 1 --branch "${{ github.ref_name }}" \
          "https://github.com/${{ github.repository }}.git" source-repo

        # Check if clone was successful
        if [ ! -d "source-repo" ]; then
          echo "::error::Failed to clone repository ${{ github.repository }} at tag ${{ github.ref_name }}"
          exit 1
        fi

        # Set source code URL for output (using the tag we want to publish)
        SOURCE_CODE_URL="https://github.com/${{ github.repository }}/archive/refs/tags/${{ inputs.tag }}.zip"
        echo "source_code_url=$SOURCE_CODE_URL" >> $GITHUB_OUTPUT
    - name: Setup packcli binary
      shell: bash
      run: |
        # Copy the packcli binary from the action repository
        cp $GITHUB_ACTION_PATH/packcli-linux-amd64 ./packcli-linux-amd64

        # Make the binary executable
        chmod +x packcli-linux-amd64

        # Verify the binary is available and executable
        ls -la packcli-linux-amd64
        file packcli-linux-amd64
    - name: Publish module using packcli
      shell: bash
      run: |
        # Change to the specified directory
        cd "source-repo/${{ inputs.directory }}"

        # Verify packcli.yaml exists
        if [ ! -f "packcli.yaml" ]; then
          echo "::error::No packcli.yaml found in ${{ inputs.directory }}/ directory"
          exit 1
        fi

        # Set packcli path and version
        PACKCLI_PATH="../../packcli-linux-amd64"
        VERSION_TAG="${{ inputs.tag || github.ref_name }}"

        # Determine if it's automatic increment or semantic version
        if [[ "$VERSION_TAG" =~ ^(major|minor|patch|tag)$ ]]; then
          echo "Using packcli automatic increment: $VERSION_TAG"
          PACKCLI_CMD="$PACKCLI_PATH module publish --auth-basic \"${{ inputs.username }}:${{ inputs.password }}\" --no-interactive --message \"Published from GitHub release ${{ inputs.tag }}\" $VERSION_TAG"
        else
          echo "Using semantic version: $VERSION_TAG"
          PACKCLI_CMD="$PACKCLI_PATH module publish --auth-basic \"${{ inputs.username }}:${{ inputs.password }}\" --no-interactive --version \"$VERSION_TAG\" --message \"Published from GitHub release ${{ inputs.tag }}\""
        fi

        # Create module if it doesn't exist (ignore errors)
        $PACKCLI_PATH module create --auth-basic "${{ inputs.username }}:${{ inputs.password }}" --no-interactive || true

        # Publish module
        eval $PACKCLI_CMD || {
          echo "::error::Failed to publish module" >&2
          exit 1
        }
    - name: Cleanup
      shell: bash
      run: |
        rm -rf source-repo
        rm -f packcli-linux-amd64
