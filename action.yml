---
name: "Module Release Locator"
description: |
  "Locates and processes release source code from GitHub repositories"
author: "WippyAI"
inputs:
  username:
    description: "Username for modules.wippy.ai authentication"
    required: true
  password:
    description: "Password for modules.wippy.ai authentication"
    required: true
  tag:
    description: "The version tag to publish (defaults to current release tag)"
    required: false
    default: ${{ github.ref_name }}
  directory:
    description: "The directory to release files"
    required: false
    default: "."

outputs:
  source_code_url:
    description: "URL of the release source code"
    value: ${{ steps.clone.outputs.source_code_url }}

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
    - name: Clone repository at current tag
      id: clone
      shell: bash
      run: |
        # Clone the repository at the current tag/branch (github.ref_name)
        git clone --depth 1 --branch "${{ github.ref_name }}" \
          "https://github.com/${{ github.repository }}.git" source-repo

        # Check if clone was successful
        if [ ! -d "source-repo" ]; then
          echo "::error::Failed to clone repository ${{ github.repository }} at tag ${{ github.ref_name }}"
          exit 1
        fi

        # Set source code URL for output (using the tag we want to publish)
        SOURCE_CODE_URL="https://github.com/${{ github.repository }}/archive/refs/tags/${{ inputs.tag }}.zip"
        echo "source_code_url=$SOURCE_CODE_URL" >> $GITHUB_OUTPUT
    - name: Setup packcli binary
      shell: bash
      run: |
        # Copy the packcli binary from the action repository
        cp $GITHUB_ACTION_PATH/packcli-linux-amd64 ./packcli-linux-amd64

        # Make the binary executable
        chmod +x packcli-linux-amd64

        # Verify the binary is available and executable
        ls -la packcli-linux-amd64
        file packcli-linux-amd64
    - name: Prepare module for publishing
      shell: bash
      run: |
        # Change to the specified directory
        cd "source-repo/${{ inputs.directory }}"

        # Look for packcli.yaml in the current directory
        if [ -f "packcli.yaml" ]; then
          echo "Found packcli.yaml in ${{ inputs.directory }}/ directory"
        else
          echo "::error::No packcli.yaml found in ${{ inputs.directory }}/ directory"
          echo "::error::Expected packcli.yaml file in the specified directory"
          exit 1
        fi

        echo "Debug: Module structure prepared:"
        ls -la .
    - name: Publish module using packcli
      shell: bash
      run: |
        # Change to the specified directory
        cd "source-repo/${{ inputs.directory }}"

        # Get absolute path to packcli binary
        PACKCLI_PATH="$(pwd | sed 's|source-repo.*|packcli-linux-amd64|')"

        # Debug information
        echo "Debug: Publishing module from packcli.yaml"
        echo "Debug: Cloned from tag: ${{ github.ref_name }}"
        echo "Debug: Publishing with version: ${{ inputs.tag }}"
        echo "Debug: Current directory: $(pwd)"
        echo "Debug: Packcli path: $PACKCLI_PATH"
        echo "Debug: Checking packcli binary:"
        ls -la "$PACKCLI_PATH"

        # Create module if it doesn't exist
        "$PACKCLI_PATH" module create \
          --auth-basic "${{ inputs.username }}:${{ inputs.password }}" \
          --no-interactive || true

        # Publish module version
        "$PACKCLI_PATH" module publish \
          --auth-basic "${{ inputs.username }}:${{ inputs.password }}" \
          --no-interactive --version "${{ inputs.tag }}" \
          --message "Published from GitHub release ${{ inputs.tag }}" patch

        # Check exit code
        if [ $? -ne 0 ]; then
          echo "::error::Failed to publish module" >&2
          exit 1
        fi
    - name: Cleanup
      shell: bash
      run: |
        rm -rf source-repo
        rm -f packcli-linux-amd64
