name: "Module Release Locator"
description: "Locates and processes release source code from GitHub repositories. Requires packcli.yaml in module repository."
author: "WippyAI"

inputs:
  repository:
    description: "The repository to locate release from (e.g., wippyai/module-hello)"
    required: true
  tag:
    description: "The release tag to locate (e.g., v1.0.0)"
    required: true
  token:
    description: "GitHub token for authentication"
    required: true
  username:
    description: "Username for modules.wippy.ai authentication"
    required: true
  password:
    description: "Password for modules.wippy.ai authentication"
    required: true

outputs:
  source_code_url:
    description: "URL of the release source code"

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
    - name: Download source code
      shell: bash
      run: |
        SOURCE_CODE_URL="https://github.com/${{ inputs.repository }}/archive/refs/tags/${{ inputs.tag }}.zip"
        curl -L -H "Authorization: token ${{ inputs.token }}" -o source.zip "$SOURCE_CODE_URL"
        echo "source_code_url=$SOURCE_CODE_URL" >> $GITHUB_OUTPUT
    - name: Setup packcli binary
      shell: bash
      run: |
        # Copy the packcli binary from the action repository
        cp $GITHUB_ACTION_PATH/packcli-linux-amd64 ./packcli-linux-amd64

        # Make the binary executable
        chmod +x packcli-linux-amd64

        # Verify the binary is available and executable
        ls -la packcli-linux-amd64
        file packcli-linux-amd64
    - name: Prepare module for publishing
      shell: bash
      run: |
        # Create module directory structure
        mkdir -p module-publish/src

        # Extract source code to src directory
        unzip -q source.zip -d temp-extract
        # Move contents from extracted directory to src
        find temp-extract -mindepth 1 -maxdepth 1 -exec mv {} module-publish/src/ \;
        rmdir temp-extract

        # Look for packcli.yaml in the extracted source code (required)
        PACKCLI_YAML_PATH=$(find module-publish/src -name "packcli.yaml" -type f | head -1)
        if [ -n "$PACKCLI_YAML_PATH" ]; then
          echo "Using packcli.yaml from module repository: $PACKCLI_YAML_PATH"
          cp "$PACKCLI_YAML_PATH" module-publish/
        else
          echo "::error::packcli.yaml is required in module repository"
          exit 1
        fi

        echo "Debug: Module structure prepared:"
        ls -la module-publish/
        ls -la module-publish/src/
        echo "Debug: packcli.yaml content:"
        cat module-publish/packcli.yaml
    - name: Publish module using packcli
      shell: bash
      run: |
        cd module-publish

        # Debug information
        echo "Debug: Publishing module from packcli.yaml"
        echo "Debug: Version: ${{ inputs.tag }}"
        echo "Debug: Checking packcli binary:"
        ls -la ../packcli-linux-amd64

        # Create module if it doesn't exist (reads module_id from packcli.yaml)
        ../packcli-linux-amd64 module create --auth-basic "${{ inputs.username }}:${{ inputs.password }}" --no-interactive || true

        # Publish module version (reads module_id from packcli.yaml)
        ../packcli-linux-amd64 module publish --auth-basic "${{ inputs.username }}:${{ inputs.password }}" --no-interactive --version "${{ inputs.tag }}" --message "Published from GitHub release ${{ inputs.tag }}" patch

        # Check exit code
        if [ $? -ne 0 ]; then
          echo "::error::Failed to publish module" >&2
          exit 1
        fi
    - name: Cleanup
      shell: bash
      run: |
        rm -f source.zip
        rm -f packcli-linux-amd64
        rm -rf module-publish
