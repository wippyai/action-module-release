---
name: "Module Release Locator"
description: |
  "Locates and processes release source code from GitHub repositories"
author: "WippyAI"
inputs:
  repository:
    description: |
      "The repository to locate release from (e.g., wippyai/module-hello)"
    required: true
  tag:
    description: "The release tag to locate (e.g., v1.0.0)"
    required: true
  token:
    description: "GitHub token for authentication"
    required: true
  module_id:
    description: "The UUID of the module to upload to"
    required: true
  username:
    description: "Username for modules.wippy.ai authentication"
    required: true
  password:
    description: "Password for modules.wippy.ai authentication"
    required: true
  directory:
    description: "The directory to release files"
    required: false
    default: "."

outputs:
  source_code_url:
    description: "URL of the release source code"

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
    - name: Download source code
      shell: bash
      run: |
        SOURCE_CODE_URL="https://github.com/${{ inputs.repository }}/archive/refs/tags/${{ inputs.tag }}.zip"
        curl -L -H "Authorization: token ${{ inputs.token }}" \
          -o source.zip "$SOURCE_CODE_URL"

        # Check if download was successful
        if [ ! -f source.zip ] || [ ! -s source.zip ]; then
          echo "::error::Failed to download source code from $SOURCE_CODE_URL"
          exit 1
        fi

        echo "source_code_url=$SOURCE_CODE_URL" >> $GITHUB_OUTPUT
    - name: Setup packcli binary
      shell: bash
      run: |
        # Copy the packcli binary from the action repository
        cp $GITHUB_ACTION_PATH/packcli-linux-amd64 ./packcli-linux-amd64

        # Make the binary executable
        chmod +x packcli-linux-amd64

        # Verify the binary is available and executable
        ls -la packcli-linux-amd64
        file packcli-linux-amd64
    - name: Prepare module for publishing
      shell: bash
      run: |
        # Create module directory structure
        mkdir -p module-publish/src

        # Extract source code to src directory
        unzip -q source.zip -d temp-extract
        if [ $? -ne 0 ]; then
          echo "::error::Failed to extract source code from source.zip"
          exit 1
        fi

        # Move contents from extracted directory to src
        # Move contents from extracted directory to src
        rmdir temp-extract

        # Look for existing packcli.yaml in the specified directory
        YAML_PATH="module-publish/src/${{ inputs.directory }}/packcli.yaml"
        if [ -f "$YAML_PATH" ]; then
          echo "Found existing packcli.yaml in ${{ inputs.directory }}/ directory"
          cp "$YAML_PATH" module-publish/packcli.yaml
        else
          echo "::error::No packcli.yaml found in ${{ inputs.directory }}/ directory"
          echo "::error::Expected packcli.yaml file in the specified directory"
          exit 1
        fi

        echo "Debug: Module structure prepared:"
        ls -la module-publish/
        ls -la module-publish/src/
    - name: Publish module using packcli
      shell: bash
      run: |
        cd module-publish

        # Debug information
        echo "Debug: Publishing module: ${{ inputs.module_id }}"
        echo "Debug: Version: ${{ inputs.tag }}"
        echo "Debug: Checking packcli binary:"
        ls -la ../packcli-linux-amd64

        # Create module if it doesn't exist
        ../packcli-linux-amd64 module create \
          --auth-basic "${{ inputs.username }}:${{ inputs.password }}" \
          --no-interactive || true

        # Publish module version
        ../packcli-linux-amd64 module publish \
          --auth-basic "${{ inputs.username }}:${{ inputs.password }}" \
          --no-interactive --version "${{ inputs.tag }}" \
          --message "Published from GitHub release ${{ inputs.tag }}" patch

        # Check exit code
        if [ $? -ne 0 ]; then
          echo "::error::Failed to publish module" >&2
          exit 1
        fi
    - name: Cleanup
      shell: bash
      run: |
        rm -f source.zip
        rm -f packcli-linux-amd64
        rm -rf module-publish
